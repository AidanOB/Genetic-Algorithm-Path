function newPop = generateIntermediatePopulation(pop, fitVals, chrome, popSize)
    % A function that generated the intermediate population for a genetic
    % algorithm. It generates the population, then randomises the order
    % prior to crossover to help mix genes

    %pop is the current generation population
    %fitVals is the percentage based fitness value
    %chrome is the number of chromosomes
    %popSize is the size of the population

    %newPop is the returned matrix of the intermediate generation chosen
    %for crossover for the next generation

    %The number of the intermediate generation created. Used to keep track
    %of generated members and ensure the correct number are made for the
    %next generation
    count = 0;
    
    %Creating a temp population prior to randomising order
    newPop = zeros(chrome, popSize);
    tempPop = zeros(chrome, popSize);
    
    %This loop goes through each member of the population and and inserts
    %the number of copies generated by the proportion
    fittest = find(fitVals == max(fitVals));
%     pause();
    
    %This will ensure that the first always survives to pass onward, but
    %it will always be different, and usually the previous fittest.
    tempReplace = pop(:,1);
    if ~isempty(fittest)
        fitReplace = pop(:,fittest(1));
    else
        fitReplace = pop(:,1);
    end
    h = cumsum(fitVals);
    for i = 1:popSize,
        parent = find(h > rand, 1, 'first');
        tempPop(:,i) = pop(:,parent);
%         numOfNewMembers = int16(fitVals(i) * popSize);
%         newCount = count+numOfNewMembers;
%         if newCount <= popSize
%             for j = 1:numOfNewMembers
%                 tempPop(:,count+j) = pop(:,i);
%             end
% 
%         end
%        count = newCount;
    end
    
%     tempPop(:,1) = fitReplace(:,1);
%     tempPop(:,end) = tempReplace(:,1);
%     
%     for i = 1:popSize
%         if tempPop(end, i) == 0
%             tempPop(:, i) = pop(:,randi(popSize));
%         end
%     end
    
    reorder = randperm(popSize);
    for i = 1:popSize
        newPop(:,i) = tempPop(:, reorder(i));
    end
    newPop(:,1) = fitReplace(:);
%     pause();
end